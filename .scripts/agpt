#!/bin/zsh

# ========================================
# Script Name: agpt
# Description: A simple script to interact with OpenAI's ChatGPT API.
# Author: soy0ka (me@yoru.icu)
# Usage: ./agpt <message> [-t <temperature>] [-M <max_tokens>]
# Requirements: jq, glow (optional)
# Notes:
#   - You need to set your OpenAI API key to the environment variable OPENAI_API_KEY.
# ========================================


# Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
TEMPERATURE=0.7
MODEL="gpt-3.5-turbo"
MAX_TOKENS=4096
API_URL="https://api.openai.com/v1/chat/completions"
HISTORY_FILE="${HOME}/.gpt_history.json"
SESSION_TIMEOUT=900 # 15Î∂Ñ  

# ÎèÑÏõÄÎßê Ï∂úÎ†• Ìï®Ïàò
show_help() {
  echo "Usage: $0 <message> [-m <model>]  [-t <temperature>] [-M <max_tokens>]"
  echo "  <message>           Required. The message to send to the API."
  echo "  -t <temperature>    Optional. The temperature to use. Default is $TEMPERATURE."
  echo "  -M <max_tokens>     Optional. The maximum number of tokens to generate. Default is $MAX_TOKENS."
  echo "  -h                  Show this help message."
  echo "  -c                  Clear all history."
}

# ÏòµÏÖò ÌååÏã±
while getopts "m:t:M:hc" opt; do
  case ${opt} in
  m)
    MODEL="$OPTARG"
  ;;
  t )
    TEMPERATURE="$OPTARG"
    ;;
  M )
    MAX_TOKENS="$OPTARG"
    ;;
  h )
    show_help
    exit 0
    ;;
  c )
    if [ -f "$HISTORY_FILE" ]; then
      rm -f "$HISTORY_FILE"
      echo "History cleared."
    else
      echo "No history file found."
    fi
      exit 0
    ;;
  \? )
    echo "Invalid option: $OPTARG" 1>&2
    show_help
    exit 1
    ;;
  : )
    echo "Invalid option: $OPTARG requires an argument" 1>&2
    show_help
    exit 1
    ;;
  esac
done
shift $((OPTIND -1))

# ÎÇ®ÏùÄ Ïù∏ÏûêÎ•º Î©îÏãúÏßÄÎ°ú ÏÇ¨Ïö©
MESSAGE="$1"

# ÌïÑÏàò ÏòµÏÖò Ï≤¥ÌÅ¨
if [ -z "$MESSAGE" ];then
  echo "Error: Message is required." 1>&2
  show_help
  exit 1
fi

if [ -z "$OPENAI_API_KEY" ]; then
  echo "Error: Pleas setup your API key to environment variable"
  echo "Run: export OPENAI_API_KEY=your_key" 
  
  exit 1
fi

if [ ! -f "$HISTORY_FILE" ]; then
  echo '{"meta":{"last_interaction":0}, "messages":[]}' > "$HISTORY_FILE"
fi

NOW=$(date +%s)
LAST_INTERACTION=$(jq '.meta.last_interaction' "$HISTORY_FILE")
TIME_DIFF=$((NOW - LAST_INTERACTION))

if [ "$TIME_DIFF" -ge "$SESSION_TIMEOUT" ] && [ "$(jq '.messages | length' "$HISTORY_FILE")" -gt 0 ]; then
  echo "üí¨ ÎßàÏßÄÎßâ ÎåÄÌôîÍ∞Ä $((TIME_DIFF / 60))Î∂Ñ Ï†ÑÏûÖÎãàÎã§. Ïù¥Ï†Ñ ÎåÄÌôîÎ•º Ïù¥Ïñ¥ÏÑú ÌïòÏãúÍ≤†Ïñ¥Ïöî? (Y/n): \c"
  read -r CONT
  if [[ "$CONT" =~ ^[nN]$ ]]; then
    echo '{"meta":{"last_interaction":0}, "messages":[]}' > "$HISTORY_FILE"
    echo "üßº ÌûàÏä§ÌÜ†Î¶¨Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§."
  fi
fi

jq --arg msg "$MESSAGE" \
  '.messages += [{"role": "user", "content": $msg}]' "$HISTORY_FILE" > "$HISTORY_FILE.tmp" && mv "$HISTORY_FILE.tmp" "$HISTORY_FILE"

# API Ìò∏Ï∂ú (Î≥ÄÍ≤ΩÎêú messages Í≤ΩÎ°ú Î∞òÏòÅ)
RESPONSE=$(curl -s -X POST "$API_URL" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: application/json" \
  -d @<(jq -n \
    --arg model "$MODEL" \
    --argjson temp "$TEMPERATURE" \
    --argjson max "$MAX_TOKENS" \
    --rawfile raw "$HISTORY_FILE" '
      ($raw | fromjson) as $hist |
      {
        model: $model,
        temperature: $temp,
        max_tokens: $max,
        messages: $hist.messages
      }'))

# ÏùëÎãµ ÌååÏã± & Ï†ÄÏû•
REPLY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
jq --arg reply "$REPLY" --argjson now "$NOW" \
  '.messages += [{"role": "assistant", "content": $reply}] | .meta.last_interaction = $now' "$HISTORY_FILE" > "$HISTORY_FILE.tmp" && mv "$HISTORY_FILE.tmp" "$HISTORY_FILE"

if command -v glow &> /dev/null; then
  echo "$REPLY" | glow
else
  echo "$REPLY"
  echo "Without glow, the output may not be formatted correctly"
  echo "You can install glow by running 'brew install glow' or 'cargo install glow'"
  echo "For more information, visit https://github.com/charmbracelet/glow"
fi
